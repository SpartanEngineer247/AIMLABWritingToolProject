#define stp1 2 //high makes the motor move, low makes it not move
#define dir1 3 //high is clockwise direction, low is counterclockwise direction
#define MS1_1 4 //divider pin 1, HIGH allows it to make a microstep
#define MS2_1 5 //divider pin 2, HIGH allows it to make a microstep
#define EN1  6 //enabler, determines whether the motor is engaged or not, HIGH turns off the motor

//Below are all copies of above, except now there's two of them because you need to drive both motors
//Motor 2 is the left motor on the board

#define stp2   7
#define dir2   8
#define MS1_2  9
#define MS2_2 10
#define EN2   11

#define num_points 60

//These variables are the angle of the motor at initial position (90 degrees) in radians
#define A1 1.5708 
#define A2 1.5708

//This variable controls the speed of the motor movement. The larger the value t the slower the movement
#define t 2

//Point class.
//This class is used to store the x, y coordinates of the desired location
//It will also have functions to calculate the inverse kinematics of the said coordinates
//Instance variables: x and y. Accessor, mutator, and getAngle functions.
class Point {
	double x, y;

	//Specification of length of arms and dimensions of the motors.
	//la refers to the arm attached directly to the motor
	//lb refers to the arm attached secondary to the first arm
	//lc refers to the distance between two motors' axis points.
	//These values are the lengths expressed in meters
	const double la = 0.1, lb = 0.1, lc = 0.1; //METERS!!!!!
	
public:
	//default constructor used for testing purposes only
	Point(double a=0.05, double b=0) {
		x = a;
		y = b;
	}
	
	//Setter functions
	void setX(double newx) {
		this->x = newx;
	}
	void setY(double newy) {
		this->y = newy;
	}
	
	//getters
	double getX() {
		return x;
	}
	double getY() {
		return y;
	}

	//inverse kinematics for theta1, the angle between the left motor and postivive x direction.
	double getAngle1() {
		double E1 = -2 * la * x;
		double F1 = -2 * la * y;
		double G1 = la * la - lb * lb + x * x + y * y;

		return 2 * atan((-1 * F1 + sqrt(E1 * E1 + F1 * F1 - G1 * G1)) / (G1 - E1));
	}

	//inverse kinematics for theta4, the angle between the right motor and the positive x direction.
	double getAngle2() {
		double E4 = 2 * la*(lc - x);
		double F4 = -2 * la * y;
		double G4 = lc * lc + la * la - lb * lb + x * x + y * y - 2 * lc*x;

		return 2 * atan((-1 * F4 - sqrt(E4*E4 + F4 * F4 - G4 * G4)) / (G4 - E4));

	}
};

//Declare variables for functions
char user_input;
int x;
int y;
int state;
double angle;
char letter;

int x2;
int y2;
int state2;

void setup() {

	pinMode(stp1, OUTPUT);
	pinMode(dir1, OUTPUT);
	pinMode(MS1_1, OUTPUT);
	pinMode(MS2_1, OUTPUT);
	pinMode(EN1, OUTPUT);

	pinMode(stp2, OUTPUT);
	pinMode(dir2, OUTPUT);
	pinMode(MS1_2, OUTPUT);
	pinMode(MS2_2, OUTPUT);
	pinMode(EN2, OUTPUT);

	//Returns step, direction, microstep and enable pins to default states
	resetEDPins1();
	resetEDPins2();

	//Open Serial connection for debugging
	Serial.begin(9600);
	Serial.println("Begin motor control \n");
	
	//The below code is to be implemented once letter coordinates are received
	//Serial.println("What letter would you like to write?");
	//Serial.println("Input any letters from A-Z, write them as capital letters");
	//Serial.println();
}

//Main loop
void loop() {
	while (Serial.available()) {
		//letter = Serial.parse(); //Assign user input to the letter
		digitalWrite(EN1, LOW); //Pull enable pin low to allow motor control
		digitalWrite(EN2, LOW); //Pull enable pin low to allow motor control

		//An array of Point objects, and a point P1
		Point P[num_points], P1;
		//This was added to test the functionality of the motor if a point with x, y coordinates was passed
		//The motor then should move the effector P to that point
		//The final version of the code will likely receive an array size [num_points] of point classes
		//as an input which holds the critical points to form a letter or shape.

		//These arrays hold the angles that correspond to the points
		double angle1[num_points], angle2[num_points];

		P1.setX(0);
		P1.setY(18);// Added for testing


		//Small step takes the function that moves the motor by a certain angle, it needs two arguments:
		//the angles of the first and second motors
		//SmallStep(P1.getAngle1(), P1.getAngle2());
		//delay(10000);

		//loop create a set of points that draws a stright line. purely for testing
		//this loop will later be replaced with a input array of points that draw a desired shape
		for (int x = num_points - 1; x >= 0; x--) {
			P[x].setY(x*0.01);
			P[x].setX(0.05);
		}

		//gets the angles for these points
		for (int x = 0; x < num_points; x++) {
			angle1[x] = P[x].getAngle1();
			angle2[x] = P[x].getAngle2();
		}

		
		//Movement function engages the motors to move to the desired target angles
		movement(angle1, angle2);
		
		//!!! ADDED FOR TESTING
		cout << "After Movement Function";
		
		//!!!! ADDED DELAY AFTER MOVEMENT SO THAT GETLINE DOES NOT EXECUTE IMMEDIATELY AFTER MOVEMENT
		delay(3000);
		
		//Creates an origin point O where both theta1 and theta 4 are 90 degrees
		Point O(0.05, 0.0133975);
		//??OR Point O(0.05, 0.1866025404);
		//y coordinate is basically (2+\sqrt3)/20 or (2-\sqrt3)/20

		//getLine function takes the last known position of the motors within the program
		//(required as the motors themselves do not know their own orientation)
		//and creates an array of points that forms a straight line to the Origin
		Point line[10];
		getLine(P[num_points - 1], O, line);

		//takes array of points created by getLine function and executes movement to the Origin
		//essentially this function returns the motors to the original location before the code
		//can be run again
		drawPath(line);
		
		
		delay(3000);


		//SmallStepMode1(angle);
		//SmallStepMode2(angle);//Motor moves the indicated angle
		
		//All pins are reset in order to use again
		resetEDPins1();
		resetEDPins2();
	}
}

void getLine(Point i, Point l, Point line[]) {
	int n = 10; //arbitary number of 10 points were created to ensure smooth movement to the origin
	//a and b are the differences between the final and initial points
	double a = l.getX() - i.getX(), b = l.getY() - i.getY();
	//divided by the number of intervals, that's the length of each segment
	double delX = a / n, delY = b / n;
	//temporarily hold the coordinates of each step for array initialization
	double x, y;

	//loop starts from 1 because the final position should be the last point in the array
	for (int j = 1; j <= n; j++) {
		//x and y coordinates of the line
		x = i.getX() + j * delX;
		y = i.getY() + j * delY;

		//sets the coordinates of the Points of the array accordingly
		line[j - 1].setX(x);
		line[j - 1].setY(y);
	}
}

void drawPath(Point line[]) {
	double a1[num_points], a2[num_points];
	//gets the angles for these points
	for (int x = 0; x < num_points; x++) {
		a1[x] = line[x].getAngle1();
		a2[x] = line[x].getAngle2();
	}

	//movement function takes array of angles for each motor
	//and engages the motors to move to those desired angles
	movement(a1, a2);
}


//takes two arrays of angles (one for each motor), moves through these angles
void movement(double motor1[], double motor2[]) {
	
	//!!!ADDED FOR TESTING
	cout << "START OF MOVEMENT FUNCTION";
	
	// difference between intial and final positions are obtained
	double angle1 = motor1[0] - A1;
	double angle2 = motor2[0] - A2;
	
	//!!!ADDED FOR TESTING
	cout << "BEFORE FIRST CALL OF SMALLSTEP FUNCTION";
	
	// this is the first step
	SmallStep(angle1, angle2);

	// loop that moves the motor across the length and path of a shape or letter
	for (int x = 1; x < num_points; x++) {
		//gets difference between every angle and the previous one
		angle1 = motor1[x] - motor1[x - 1];
		angle2 = motor2[x] - motor2[x - 1];

		//passes to the actual motion function
		SmallStep(angle1, angle2);
	}

	//Difference between original and last agle
	angle1 = A1 - motor1[num_points - 1];
	angle2 = A2 - motor2[num_points - 1];
	
	//!!!ADDED FOR TESTING
	cout << "BEFORE SECOND CALL OF SMALLESTEP FUNCTION";
	
	//Here, P is put back in its intial position
	//(by moving it through the difference between the last and the initial angles)
	SmallStep(angle1, angle2);
	
	//!!!ADDED FOR TESTING
	cout << "END OF MOVEMENT FUNCTION";
}

void SmallStep(double angle1, double angle2) {

	if (angle1 > 0) {//if number of steps given is negative;
		digitalWrite(dir1, LOW); //dir set to LOW or counter-clockwise
	}
	else if (angle1 < 0) {
		digitalWrite(dir1, HIGH);// else, dir is set to HIGH or clockwise
	}

	if (angle2 > 0) {//if number of steps given is negative;
		digitalWrite(dir2, LOW); //dir set to LOW or counter-clockwise
	}
	else if (angle2 < 0) {
		digitalWrite(dir2, HIGH);// else, dir is set to HIGH or clockwise
	}

	digitalWrite(MS1_1, HIGH);
	digitalWrite(MS2_1, HIGH);
	digitalWrite(MS1_2, HIGH);
	digitalWrite(MS2_2, HIGH);// These have to be high all the time, i have no idea why im even including this here

	//The stepper motors moves in discrete angles.
	//These functions below calculates the number of discrete angles required to move the desired angle
	int steps1 = abs(angle1 / 0.00393);
	int steps2 = abs(angle2 / 0.00393);
	//0.225 deg == 0.00393 rad

	//the functions below checks which of the two motors require greater movement
	//it sets the greater movement as the value 'max'
	//it then runs a loop where each motor is moved by a single discrete step
	//until it reaches 'max' number of steps
	//the motor with less movement is stopped before 'max' is reached
	int Max;
	if (steps1 >= steps2)
		Max = steps1;
	else
		Max = steps2;

	// This loop is ensure that the motor's movements are smooth as it forces the motor to take sequential steps
	//Loops [larger number of steps] times
	//delay(t) is used to control the motor movement speed
	//where larger t value leads to slower movement
	for (int x = 0; x < Max; x++) {
		//move one step
		if (steps1 > 0) {
			digitalWrite(stp1, HIGH);
			delay(t);
			digitalWrite(stp1, LOW);
			delay(t);
		}

		//move one step
		if (steps2 > 0) {
			digitalWrite(stp2, HIGH);
			delay(t);
			digitalWrite(stp2, LOW);
			delay(t);
		}

		//eventually the smaller one get to zero and stops moving
		//and the loop is proken once the larger one gets to zero
		steps1--;
		steps2--;
	}
}

//Reset Easy Driver pins to default states
void resetEDPins1()
{
	digitalWrite(stp1, LOW);
	digitalWrite(dir1, LOW);
	digitalWrite(MS1_1, LOW);
	digitalWrite(MS2_1, LOW);
	digitalWrite(EN1, HIGH);
}

void resetEDPins2()
{
	digitalWrite(stp2, LOW);
	digitalWrite(dir2, LOW);
	digitalWrite(MS1_2, LOW);
	digitalWrite(MS2_2, LOW);
	digitalWrite(EN2, HIGH);
}
